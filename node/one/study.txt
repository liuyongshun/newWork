一、
package.json 文件有双重作用：描述项目和列出依赖项。现在去看看你的 package.json 文件，你应该能看到：
{
"dependencies": {
"express": "^4.0.0",
"express3-handlebars": "^0.5.0"
}
}
现在我们的 package.json 文件里只有与依赖项相关的信息。注意包版本号之前的插入符（^） ，这表明在下一个主要版本号之前，所有以指定版本号开始的版本都能用。

二、
因为 package.json 文件中列出了所有的依赖项，所以说 node_modules 目录实际上是个衍
生品。这就是说，如果你把它删了，要让项目重新恢复工作，只需运行 npm install ，它
便会重建这个目录，并把所有必需的依赖项全放进去。

注意：这就可以考虑用.gitignore忽略掉node_modules了。只保留package.json。通过npm install 回复即可。

三、
存放需要启动的js文件的位置为根目录。本例子就是one文件夹，index.js是启动js。
lib 存放自己的拓展node模块。
views  存放视图引擎文件。
public  存放静态文件。

注意：require 是一个用来引入模块的 Node 函数。Node 默认会在目录node_modules（这应该不足为奇，在 node_modules 目录下有个 express 目录）中寻找这些模块。

我们创建一个用来保存模块的目录。名字随意，但一般都称为 lib（library 的缩写） 。
在这个目录下创建一个 fortune.js 文件：
var fortuneCookies = [
"Conquer your fears or they will conquer you.",
"Rivers need springs.",
"Do not fear what you don't know.",
"You will have a pleasant surprise.",
"Whenever possible, keep it simple.",
];
exports.getFortune = function() {
var idx = Math.floor(Math.random() * fortuneCookies.length);
return fortuneCookies[idx];
};
这里要特别注意全局变量输出的用法。如果你想让一个东西在模块外可见，必须把它加到exports 上。在这个例子中，在模块外可以访问到函数 getFortune ，但数组 fortuneCookies是完全隐藏起来的。
在启动用的js中输入下面，代码引入自己的模块。
var fortune = require('./lib/fortune.js');
我们在模块名称前加了前缀 ./ 。这是告诉 Node，它不应该到 node_modules 目录中查找这个模块，如果我们忽略了这个前缀就会导致失败。 这样就可以调用自己模块内的任何定义的方法了。


四、测试
本书要讨论的测试主要归为两大类：单元测试和集成测试（我认为“系统测试”属于集成测试） 。单元测试的粒度非常细，是对单个组件进行测试以确保其功能正确，而集成测试是对多个组件甚至整个系统之间的交互进行测试。
一般而言，单元测试在测试逻辑时更实用，也更恰当（尽管我们在表示域的代码中也会看到很多使用单元测试的实例） 。集成测试则在两个领域中都有用。

五、QA技术概览
1.页面测试 ：用来测试页面的表示和前端功能。涉及单元测试和集成测试。我们会用 Mocha 进行页面测试。
2.跨页测试 ：对从一个页面转到另一个页面的功能的测试。比如结账功能，一般被当作集成测试。这个测试用 Zombie.js。
3.逻辑测试 ：逻辑测试会对逻辑域进行单元和集成测试。
4.去毛 ：找潜在的错误。去毛的一般概念是找出可能有错误的区域，或者可能在将来导致错误发生的问题代码。我们会用 JSHint 做去毛。
5.链接检查 ：链接检查属于单元测试（链接有效或者无效） 。我们会用 LinkChecker 做链接检查。

六、node工具
一个监控工具，在它发现 JavaScript 被修改后会自动重启服务器。nodemon（https://npmjs.org/package/nodemon），它还有一个 Grunt 插件（https://www.npmjs.org/package/grunt-nodemon）。

七、
首先我们需要一个测试框架，这里用的是 Mocha。我们先把这个包添加到项目中：
npm install --save-dev mocha
注意，我们用的是 --save-dev 而不是 --save ，这是告诉 npm 要把这个包放在开发依赖项中，不要放在运行时依赖项里。这样当我们部署网站的现场实例时，可以减少项目的依赖项。